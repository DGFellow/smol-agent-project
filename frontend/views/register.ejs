<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register - Smolagent</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .auth-container {
            width: 100%;
            max-width: 500px;
        }

        .auth-card {
            background: white;
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        }

        h1 {
            color: #333;
            margin-bottom: 10px;
            font-size: 28px;
        }

        .subtitle {
            color: #666;
            margin-bottom: 30px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            color: #333;
            font-weight: 500;
            font-size: 14px;
        }

        .required {
            color: #e74c3c;
        }

        input {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 15px;
            transition: all 0.3s;
            background: #f9f9f9;
        }

        input:focus {
            outline: none;
            border-color: #667eea;
            background: white;
        }

        input.valid {
            border-color: #2ecc71;
            background: #f0fff4;
        }

        input.invalid {
            border-color: #e74c3c;
            background: #fff5f5;
        }

        .validation-message {
            font-size: 12px;
            margin-top: 5px;
            min-height: 18px;
        }

        .validation-message.success {
            color: #2ecc71;
        }

        .validation-message.error {
            color: #e74c3c;
        }

        .validation-message.checking {
            color: #3498db;
        }

        .password-strength {
            margin-top: 10px;
        }

        .strength-bar {
            height: 4px;
            background: #e0e0e0;
            border-radius: 2px;
            overflow: hidden;
            margin-bottom: 5px;
        }

        .strength-fill {
            height: 100%;
            transition: all 0.3s;
            border-radius: 2px;
        }

        .strength-text {
            font-size: 12px;
            font-weight: 500;
        }

        .strength-weak .strength-fill {
            width: 33%;
            background: #e74c3c;
        }

        .strength-medium .strength-fill {
            width: 66%;
            background: #f39c12;
        }

        .strength-strong .strength-fill {
            width: 100%;
            background: #2ecc71;
        }

        .password-requirements {
            font-size: 12px;
            margin-top: 8px;
            padding: 10px;
            background: #f9f9f9;
            border-radius: 6px;
        }

        .requirement {
            margin: 4px 0;
            color: #999;
        }

        .requirement.met {
            color: #2ecc71;
        }

        .requirement::before {
            content: "○ ";
        }

        .requirement.met::before {
            content: "✓ ";
            font-weight: bold;
        }

        .btn-primary {
            width: 100%;
            padding: 14px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            margin-top: 10px;
        }

        .btn-primary:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
        }

        .btn-primary:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .error-message {
            background: #fff5f5;
            color: #e74c3c;
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-size: 14px;
            display: none;
        }

        .error-message.show {
            display: block;
        }

        .success-message {
            background: #f0fff4;
            color: #2ecc71;
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-size: 14px;
            display: none;
        }

        .success-message.show {
            display: block;
        }

        .auth-footer {
            text-align: center;
            margin-top: 20px;
            color: #666;
        }

        .auth-footer a {
            color: #667eea;
            text-decoration: none;
            font-weight: 600;
        }

        .auth-footer a:hover {
            text-decoration: underline;
        }

        .oauth-section {
            margin: 30px 0;
        }

        .oauth-divider {
            text-align: center;
            position: relative;
            margin: 20px 0;
        }

        .oauth-divider::before {
            content: "";
            position: absolute;
            left: 0;
            top: 50%;
            width: 100%;
            height: 1px;
            background: #e0e0e0;
        }

        .oauth-divider span {
            background: white;
            padding: 0 15px;
            position: relative;
            color: #999;
            font-size: 14px;
        }

        .oauth-buttons {
            display: flex;
            gap: 10px;
        }

        .oauth-btn {
            flex: 1;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            background: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            font-weight: 500;
            transition: all 0.3s;
        }

        .oauth-btn:hover {
            border-color: #667eea;
            background: #f9f9ff;
        }

        .loading {
            display: inline-block;
            width: 14px;
            height: 14px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="auth-container">
        <div class="auth-card">
            <h1>Create Account</h1>
            <p class="subtitle">Join Smolagent and start your AI journey</p>
            
            <div id="errorMessage" class="error-message"></div>
            <div id="successMessage" class="success-message"></div>
            
            <form id="registerForm">
                <div class="form-group">
                    <label for="username">Username <span class="required">*</span></label>
                    <input 
                        type="text" 
                        id="username" 
                        name="username" 
                        required 
                        autocomplete="username"
                        placeholder="Choose a unique username"
                    >
                    <div id="usernameValidation" class="validation-message"></div>
                </div>
                
                <div class="form-group">
                    <label for="email">Email <span class="required">*</span></label>
                    <input 
                        type="email" 
                        id="email" 
                        name="email" 
                        required 
                        autocomplete="email"
                        placeholder="your.email@example.com"
                    >
                    <div id="emailValidation" class="validation-message"></div>
                </div>

                <div class="form-group">
                    <label for="firstName">First Name</label>
                    <input 
                        type="text" 
                        id="firstName" 
                        name="firstName" 
                        autocomplete="given-name"
                        placeholder="Your first name"
                    >
                </div>

                <div class="form-group">
                    <label for="lastName">Last Name</label>
                    <input 
                        type="text" 
                        id="lastName" 
                        name="lastName" 
                        autocomplete="family-name"
                        placeholder="Your last name"
                    >
                </div>

                <div class="form-group">
                    <label for="birthdate">Birthdate</label>
                    <input 
                        type="date" 
                        id="birthdate" 
                        name="birthdate" 
                        autocomplete="bday"
                    >
                </div>

                <div class="form-group">
                    <label for="phone">Phone Number (for 2FA)</label>
                    <input 
                        type="tel" 
                        id="phone" 
                        name="phone" 
                        autocomplete="tel"
                        placeholder="+1234567890"
                    >
                    <div id="phoneValidation" class="validation-message"></div>
                </div>
                
                <div class="form-group">
                    <label for="password">Password <span class="required">*</span></label>
                    <input 
                        type="password" 
                        id="password" 
                        name="password" 
                        required 
                        autocomplete="new-password"
                        placeholder="Create a strong password"
                    >
                    <div class="password-strength" id="passwordStrength" style="display:none;">
                        <div class="strength-bar">
                            <div class="strength-fill"></div>
                        </div>
                        <div class="strength-text"></div>
                    </div>
                    <div class="password-requirements">
                        <div class="requirement" id="req-length">At least 8 characters</div>
                        <div class="requirement" id="req-upper">One uppercase letter</div>
                        <div class="requirement" id="req-lower">One lowercase letter</div>
                        <div class="requirement" id="req-number">One number</div>
                        <div class="requirement" id="req-special">One special character (!@#$%^&*...)</div>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="passwordConfirm">Confirm Password <span class="required">*</span></label>
                    <input 
                        type="password" 
                        id="passwordConfirm" 
                        name="passwordConfirm" 
                        required 
                        autocomplete="new-password"
                        placeholder="Confirm your password"
                    >
                    <div id="passwordConfirmValidation" class="validation-message"></div>
                </div>
                
                <button type="submit" class="btn-primary" id="submitBtn">Create Account</button>
            </form>

            <div class="oauth-section">
                <div class="oauth-divider"><span>Or continue with</span></div>
                <div class="oauth-buttons">
                    <button class="oauth-btn" id="googleBtn">
                        <svg width="18" height="18" viewBox="0 0 18 18">
                            <path fill="#4285F4" d="M17.64 9.2c0-.637-.057-1.251-.164-1.84H9v3.481h4.844c-.209 1.125-.843 2.078-1.796 2.716v2.259h2.908c1.702-1.567 2.684-3.875 2.684-6.615z"/>
                            <path fill="#34A853" d="M9 18c2.43 0 4.467-.806 5.956-2.184l-2.908-2.259c-.806.54-1.837.86-3.048.86-2.344 0-4.328-1.584-5.036-3.711H.957v2.332C2.438 15.983 5.482 18 9 18z"/>
                            <path fill="#FBBC05" d="M3.964 10.706c-.18-.54-.282-1.117-.282-1.706 0-.593.102-1.17.282-1.709V4.958H.957C.347 6.173 0 7.548 0 9s.348 2.827.957 4.042l3.007-2.336z"/>
                            <path fill="#EA4335" d="M9 3.58c1.321 0 2.508.454 3.44 1.345l2.582-2.58C13.463.891 11.426 0 9 0 5.482 0 2.438 2.017.957 4.958L3.964 7.29C4.672 5.163 6.656 3.58 9 3.58z"/>
                        </svg>
                        Google
                    </button>
                    <button class="oauth-btn" id="githubBtn">
                        <svg width="18" height="18" fill="#333" viewBox="0 0 16 16">
                            <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z"/>
                        </svg>
                        GitHub
                    </button>
                </div>
            </div>
            
            <div class="auth-footer">
                <p>Already have an account? <a href="/login">Login here</a></p>
            </div>
        </div>
    </div>
    
    <script>
        const form = document.getElementById('registerForm');
        const submitBtn = document.getElementById('submitBtn');
        const errorDiv = document.getElementById('errorMessage');
        const successDiv = document.getElementById('successMessage');

        // Debounce helper
        function debounce(func, wait) {
            let timeout;
            return function(...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        }

        // Username validation
        const usernameInput = document.getElementById('username');
        const usernameValidation = document.getElementById('usernameValidation');
        
        const checkUsername = debounce(async (username) => {
            if (username.length < 3) {
                usernameInput.className = 'invalid';
                usernameValidation.className = 'validation-message error';
                usernameValidation.textContent = 'Username must be at least 3 characters';
                return;
            }

            usernameValidation.className = 'validation-message checking';
            usernameValidation.innerHTML = '<span class="loading"></span> Checking availability...';

            try {
                const response = await fetch('http://localhost:5001/api/auth/check-username', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ username })
                });

                const data = await response.json();

                if (data.available) {
                    usernameInput.className = 'valid';
                    usernameValidation.className = 'validation-message success';
                    usernameValidation.textContent = '✓ Username available';
                } else {
                    usernameInput.className = 'invalid';
                    usernameValidation.className = 'validation-message error';
                    usernameValidation.textContent = '✗ ' + data.message;
                }
            } catch (error) {
                usernameValidation.className = 'validation-message error';
                usernameValidation.textContent = 'Error checking username';
            }
        }, 500);

        usernameInput.addEventListener('input', (e) => {
            checkUsername(e.target.value.trim());
        });

        // Email validation
        const emailInput = document.getElementById('email');
        const emailValidation = document.getElementById('emailValidation');
        
        const checkEmail = debounce(async (email) => {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                emailInput.className = 'invalid';
                emailValidation.className = 'validation-message error';
                emailValidation.textContent = 'Invalid email format';
                return;
            }

            emailValidation.className = 'validation-message checking';
            emailValidation.innerHTML = '<span class="loading"></span> Checking availability...';

            try {
                const response = await fetch('http://localhost:5001/api/auth/check-email', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email })
                });

                const data = await response.json();

                if (data.available) {
                    emailInput.className = 'valid';
                    emailValidation.className = 'validation-message success';
                    emailValidation.textContent = '✓ Email available';
                } else {
                    emailInput.className = 'invalid';
                    emailValidation.className = 'validation-message error';
                    emailValidation.textContent = '✗ ' + data.message;
                }
            } catch (error) {
                emailValidation.className = 'validation-message error';
                emailValidation.textContent = 'Error checking email';
            }
        }, 500);

        emailInput.addEventListener('input', (e) => {
            checkEmail(e.target.value.trim());
        });

        // Password strength
        const passwordInput = document.getElementById('password');
        const passwordStrength = document.getElementById('passwordStrength');
        
        function checkPasswordStrength(password) {
            if (!password) {
                passwordStrength.style.display = 'none';
                return;
            }

            passwordStrength.style.display = 'block';

            const requirements = {
                length: password.length >= 8,
                upper: /[A-Z]/.test(password),
                lower: /[a-z]/.test(password),
                number: /\d/.test(password),
                special: /[!@#$%^&*(),.?":{}|<>_\-+=\[\]\\;/~`]/.test(password)
            };

            // Update requirement indicators
            document.getElementById('req-length').className = requirements.length ? 'requirement met' : 'requirement';
            document.getElementById('req-upper').className = requirements.upper ? 'requirement met' : 'requirement';
            document.getElementById('req-lower').className = requirements.lower ? 'requirement met' : 'requirement';
            document.getElementById('req-number').className = requirements.number ? 'requirement met' : 'requirement';
            document.getElementById('req-special').className = requirements.special ? 'requirement met' : 'requirement';

            const metCount = Object.values(requirements).filter(Boolean).length;
            const strengthBar = passwordStrength.querySelector('.strength-fill');
            const strengthText = passwordStrength.querySelector('.strength-text');

            passwordStrength.className = 'password-strength';

            if (metCount <= 2) {
                passwordStrength.classList.add('strength-weak');
                strengthText.textContent = 'Weak password';
                passwordInput.className = 'invalid';
            } else if (metCount <= 4) {
                passwordStrength.classList.add('strength-medium');
                strengthText.textContent = 'Medium strength';
                passwordInput.className = '';
            } else {
                passwordStrength.classList.add('strength-strong');
                strengthText.textContent = 'Strong password';
                passwordInput.className = 'valid';
            }
        }

        passwordInput.addEventListener('input', (e) => {
            checkPasswordStrength(e.target.value);
        });

        // Password confirmation
        const passwordConfirmInput = document.getElementById('passwordConfirm');
        const passwordConfirmValidation = document.getElementById('passwordConfirmValidation');

        function checkPasswordMatch() {
            const password = passwordInput.value;
            const confirm = passwordConfirmInput.value;

            if (!confirm) {
                passwordConfirmInput.className = '';
                passwordConfirmValidation.textContent = '';
                return;
            }

            if (password === confirm) {
                passwordConfirmInput.className = 'valid';
                passwordConfirmValidation.className = 'validation-message success';
                passwordConfirmValidation.textContent = '✓ Passwords match';
            } else {
                passwordConfirmInput.className = 'invalid';
                passwordConfirmValidation.className = 'validation-message error';
                passwordConfirmValidation.textContent = '✗ Passwords do not match';
            }
        }

        passwordInput.addEventListener('input', checkPasswordMatch);
        passwordConfirmInput.addEventListener('input', checkPasswordMatch);

        // Phone validation
        const phoneInput = document.getElementById('phone');
        const phoneValidation = document.getElementById('phoneValidation');

        phoneInput.addEventListener('blur', () => {
            const phone = phoneInput.value.trim();
            if (phone) {
                const phoneRegex = /^\+?\d{10,15}$/;
                const cleaned = phone.replace(/[\s\-\(\)]/g, '');
                
                if (phoneRegex.test(cleaned)) {
                    phoneInput.className = 'valid';
                    phoneValidation.className = 'validation-message success';
                    phoneValidation.textContent = '✓ Valid phone format';
                } else {
                    phoneInput.className = 'invalid';
                    phoneValidation.className = 'validation-message error';
                    phoneValidation.textContent = 'Use international format (+1234567890)';
                }
            }
        });

        // Form submission
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            errorDiv.className = 'error-message';
            errorDiv.textContent = '';
            
            const formData = {
                username: usernameInput.value.trim(),
                email: emailInput.value.trim(),
                password: passwordInput.value,
                password_confirm: passwordConfirmInput.value,
                first_name: document.getElementById('firstName').value.trim(),
                last_name: document.getElementById('lastName').value.trim(),
                birthdate: document.getElementById('birthdate').value,
                phone_number: phoneInput.value.trim()
            };

            submitBtn.disabled = true;
            submitBtn.innerHTML = '<span class="loading"></span> Creating account...';

            try {
                const response = await fetch('http://localhost:5001/api/auth/register', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });

                const data = await response.json();

                if (response.ok) {
                    localStorage.setItem('token', data.token);
                    successDiv.className = 'success-message show';
                    successDiv.textContent = data.message;
                    
                    setTimeout(() => {
                        window.location.href = '/';
                    }, 2000);
                } else {
                    errorDiv.className = 'error-message show';
                    errorDiv.textContent = data.error || 'Registration failed';
                    submitBtn.disabled = false;
                    submitBtn.textContent = 'Create Account';
                }
            } catch (error) {
                errorDiv.className = 'error-message show';
                errorDiv.textContent = 'Network error. Please try again.';
                submitBtn.disabled = false;
                submitBtn.textContent = 'Create Account';
            }
        });

        // OAuth buttons (implement OAuth flows)
        document.getElementById('googleBtn').addEventListener('click', () => {
            alert('Google OAuth integration - implement OAuth flow');
            // Redirect to Google OAuth endpoint
        });

        document.getElementById('githubBtn').addEventListener('click', () => {
            alert('GitHub OAuth integration - implement OAuth flow');
            // Redirect to GitHub OAuth endpoint
        });
    </script>
</body>
</html>